// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// StorageUser is an autogenerated mock type for the StorageUser type
type StorageUser struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *StorageUser) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUser provides a mock function with given fields: ctx, login, passwordHash
func (_m *StorageUser) SaveUser(ctx context.Context, login string, passwordHash string) (uuid.UUID, error) {
	ret := _m.Called(ctx, login, passwordHash)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (uuid.UUID, error)); ok {
		return rf(ctx, login, passwordHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) uuid.UUID); ok {
		r0 = rf(ctx, login, passwordHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, passwordHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorageUser creates a new instance of StorageUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageUser {
	mock := &StorageUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
