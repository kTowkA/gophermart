// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/kTowkA/gophermart/internal/model"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/kTowkA/gophermart/internal/storage"

	uuid "github.com/google/uuid"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Balance provides a mock function with given fields: ctx, userID
func (_m *Storage) Balance(ctx context.Context, userID uuid.UUID) (model.ResponseBalance, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Balance")
	}

	var r0 model.ResponseBalance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.ResponseBalance, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.ResponseBalance); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(model.ResponseBalance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields: ctx
func (_m *Storage) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HashPassword provides a mock function with given fields: ctx, userID
func (_m *Storage) HashPassword(ctx context.Context, userID uuid.UUID) (string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Orders provides a mock function with given fields: ctx, userID
func (_m *Storage) Orders(ctx context.Context, userID uuid.UUID) (model.ResponseOrders, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Orders")
	}

	var r0 model.ResponseOrders
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.ResponseOrders, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.ResponseOrders); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ResponseOrders)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersByStatuses provides a mock function with given fields: ctx, statuses, limit, offset
func (_m *Storage) OrdersByStatuses(ctx context.Context, statuses []model.Status, limit int, offset int) (model.ResponseOrders, error) {
	ret := _m.Called(ctx, statuses, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for OrdersByStatuses")
	}

	var r0 model.ResponseOrders
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.Status, int, int) (model.ResponseOrders, error)); ok {
		return rf(ctx, statuses, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []model.Status, int, int) model.ResponseOrders); ok {
		r0 = rf(ctx, statuses, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ResponseOrders)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []model.Status, int, int) error); ok {
		r1 = rf(ctx, statuses, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveOrder provides a mock function with given fields: ctx, userID, orderNum
func (_m *Storage) SaveOrder(ctx context.Context, userID uuid.UUID, orderNum model.OrderNumber) storage.ErrorWithHttpStatus {
	ret := _m.Called(ctx, userID, orderNum)

	if len(ret) == 0 {
		panic("no return value specified for SaveOrder")
	}

	var r0 storage.ErrorWithHttpStatus
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.OrderNumber) storage.ErrorWithHttpStatus); ok {
		r0 = rf(ctx, userID, orderNum)
	} else {
		r0 = ret.Get(0).(storage.ErrorWithHttpStatus)
	}

	return r0
}

// SaveUser provides a mock function with given fields: ctx, login, hashPassword
func (_m *Storage) SaveUser(ctx context.Context, login string, hashPassword string) (uuid.UUID, error) {
	ret := _m.Called(ctx, login, hashPassword)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (uuid.UUID, error)); ok {
		return rf(ctx, login, hashPassword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) uuid.UUID); ok {
		r0 = rf(ctx, login, hashPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, hashPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, info
func (_m *Storage) UpdateOrder(ctx context.Context, info model.ResponseAccuralSystem) error {
	ret := _m.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ResponseAccuralSystem) error); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrders provides a mock function with given fields: ctx, info
func (_m *Storage) UpdateOrders(ctx context.Context, info []model.ResponseAccuralSystem) (int, error) {
	ret := _m.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrders")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.ResponseAccuralSystem) (int, error)); ok {
		return rf(ctx, info)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []model.ResponseAccuralSystem) int); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []model.ResponseAccuralSystem) error); ok {
		r1 = rf(ctx, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserID provides a mock function with given fields: ctx, login
func (_m *Storage) UserID(ctx context.Context, login string) (uuid.UUID, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for UserID")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uuid.UUID, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uuid.UUID); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Withdraw provides a mock function with given fields: ctx, userID, requestWithdraw
func (_m *Storage) Withdraw(ctx context.Context, userID uuid.UUID, requestWithdraw model.RequestWithdraw) error {
	ret := _m.Called(ctx, userID, requestWithdraw)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.RequestWithdraw) error); ok {
		r0 = rf(ctx, userID, requestWithdraw)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Withdrawals provides a mock function with given fields: ctx, userID
func (_m *Storage) Withdrawals(ctx context.Context, userID uuid.UUID) (model.ResponseWithdrawals, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Withdrawals")
	}

	var r0 model.ResponseWithdrawals
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.ResponseWithdrawals, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.ResponseWithdrawals); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ResponseWithdrawals)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
